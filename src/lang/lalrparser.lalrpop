use std::str::FromStr;
use crate::lang::ast::*;

grammar;

pub JobList: JobListNode = {
    Separator? <l:JobListWithoutSeparator> => l,
};

pub TokenList: TokenListNode = {
    => TokenListNode::new(),
    <mut p:TokenList> <t:Token> => {p.tokens.push(t); p}
};

JobListWithoutSeparator: JobListNode = {
    <l: @L> => JobListNode {jobs: vec![], location: Location::new(l, l)},
    <j: NonEmptyJobList> Separator? => j,
};

NonEmptyJobList: JobListNode = {
    <l: @L> <mut lst:NonEmptyJobList> Separator <j:Job> <r: @R> =>  {
        lst.jobs.push(j);
        lst.location = Location::new(l, r);
        lst
    },
    <l: @L> <j: Job> <r: @R> => JobListNode {jobs: vec![j], location: Location::new(l, r)},
};

Job: JobNode = {
    <l: @L> <c:Command> <r: @R> => JobNode{commands: vec![c], location: Location::new(l, r)},
    <l: @L> <mut j:Job> "|" Separator? <c:Command> <r: @R> => {
        j.commands.push(c);
        j.location = Location::new(l, r);
        j
    }
};

Command: CommandNode = {
    <start: @L> <a: Assignment> <end: @R> => CommandNode{expressions: vec![*a], location: Location::new(start, end)},
    <start: @L> <mut c: Command> <a:Assignment> <end: @R> =>
        {c.expressions.push(*a);
        c.location = c.location.union(&Location::new(start, end));
        c
    }
};

Assignment: Box<Node> = {
    Logical,
    <i: Item> <op: AssignmentOperator> <e: Assignment> =>
        Box::from(Node::Assignment(i, op.to_string(), e)),
}

Logical: Box<Node> = {
    Comparison,
    <l: Logical> <start: @L> <op: LogicalOperator> <end: @R> <c: Comparison> =>
        Box::from(Node::LogicalOperation(l, TrackedString::from(op, Location::new(start, end)), c)),
}

Comparison: Box<Node> = {
    Term,
    <c: Comparison> <start: @L> <op: ComparisonOperator> <end: @R> <t: Term> =>
        Box::from(Node::Comparison(c, TrackedString::from(op, Location::new(start, end)), t)),
}

Term: Box<Node> = {
    Factor,
    <t: Term> <start: @L> <op: TermOperator> <end: @R> <f: Factor> =>
    Box::from(Node::Term(t, TrackedString::from(op, Location::new(start, end)), f)),
}

Factor: Box<Node> = {
    Unary,
    <f: Factor> <start: @L> <op: FactorOperator> <end: @R> <u: Unary> =>
        Box::from(Node::Factor(f, TrackedString::from(op, Location::new(start, end)), u)),
}

Unary: Box<Node> = {
    Item,
    <start: @L> <op: UnaryOperator> <end: @R> <u: Unary> =>
        Box::from(Node::Unary(TrackedString::from(
            op,
            Location::new(start, end)), u)),
    <start: @L> "@" <end: @R> <u: Unary> =>
        Box::from(Node::Unary(TrackedString::from(
            "@",
            Location::new(start, end)), u)),
    <start: @L> "@@" <end: @R> <u: Unary> =>
        Box::from(Node::Unary(TrackedString::from(
            "@@",
            Location::new(start, end)), u)),
}

Signature: Option<Vec<ParameterNode>> = {
    => None,
    "|" "|" Separator? => Some(vec![]),
    "|" <s: ParameterList> "|" Separator? => Some(s),
}

ParameterList: Vec<ParameterNode> = {
    Parameter => vec![<>],
    <mut l: ParameterList> Separator? <p: Parameter> => {l.push(p); l},
}

Parameter: ParameterNode = {
    <start: @L> <l: Label> <end: @R> <d: Default> =>
        ParameterNode::Parameter(TrackedString::from(l, Location::new(start, end)), None, d),
    <start: @L> <l: Label> <end: @R> Colon <t: Item> <d: Default> =>
        ParameterNode::Parameter(TrackedString::from(l, Location::new(start, end)), Some(t), d),
    "@" <start: @L> <l: Label> <end: @R> => ParameterNode::Unnamed(TrackedString::from(l, Location::new(start, end))),
    "@@" <start: @L> <l: Label> <end: @R> => ParameterNode::Named(TrackedString::from(l, Location::new(start, end))),
}

Default: Option<Node> = {
    => None,
    Equals <l: Logical> => Some(*l),
}

Item: Box<Node> = {
    <start: @L> <l: Label> <end: @R> =>
        Node::parse_label(&TrackedString::from(l, Location::new(start, end))),

    <start: @L> <l: Regex> <end: @R> =>
        Box::from(Node::Regex(TrackedString::from(&l[3..l.len()-1], Location::new(start, end)))),

    @L Field @R =>
        Box::from(Node::Field(TrackedString::literal(<>))),

    <start: @L> <l:QuotedLabel> <end: @R> =>
        Box::from(Node::Label(TrackedString::from(&l[1..l.len()-1], Location::new(start, end)))),

    @L QuotedString @R => Box::from(Node::String(TrackedString::literal(<>))),

    <start: @L> <l:Integer> <end: @R> =>
        Box::from(Node::Integer(i128::from_str(l.replace("_", "").as_str()).unwrap(), Location::new(start, end))),

    <start: @L> <l:Float> <end: @R> =>
        Box::from(Node::Float(f64::from_str(l.replace("_", "").as_str()).unwrap(), Location::new(start, end))),

    <start: @L> <l:Flag> <end: @R> =>
        Box::from(
            Node::Assignment(Box::from(Node::Label(TrackedString::from(&l[2..], Location::new(start, end)))),
            "=".to_string(),
            Box::from(Node::Label(TrackedString::from("true", Location::new(start, end)))))),

    <i: Item> "[" <e: Assignment> "]" => Box::from(Node::GetItem(i, e)),
    <i: Item> Colon <start: @L> <l: AnyLabel> <end: @R> => Box::from(Node::GetAttr(i, TrackedString::from(&l, Location::new(start, end)))),
    "{" Separator? <s: Signature> <l: JobListWithoutSeparator> "}" => Box::from(Node::Closure(s, l)),
    "(" <j:Job> ")" => Box::from(Node::Substitution(j)),
}

AnyLabel: String = {
    Label => <>.to_string(),
    <l: QuotedLabel> => l[1..l.len()-1].to_string(),
}

AssignmentOperator: &'input str = {
    Equals => <>,
    Declare => <>,
}

Token: TokenNode = {
    @L LogicalOperator @R => TokenNode::new(TokenType::LogicalOperator, <>),
    @L UnaryOperator @R => TokenNode::new(TokenType::UnaryOperator, <>),
    @L Colon @R => TokenNode::new(TokenType::Colon, <>),
    @L AssignmentOperator @R => TokenNode::new(TokenType::AssignmentOperator, <>),
    @L ComparisonOperator @R => TokenNode::new(TokenType::ComparisonOperator, <>),
    @L FactorOperator @R => TokenNode::new(TokenType::FactorOperator, <>),
    @L TermOperator @R => TokenNode::new(TokenType::TermOperator, <>),
    @L QuotedString @R => TokenNode::new(TokenType::QuotedString, <>),
    @L Label @R => TokenNode::new(TokenType::Label, <>),
    @L Flag @R => TokenNode::new(TokenType::Flag, <>),
    @L Field @R => TokenNode::new(TokenType::Field, <>),
    @L QuotedLabel @R => TokenNode::new(TokenType::QuotedLabel, <>),
    @L Regex @R => TokenNode::new(TokenType::Regex, <>),
    @L Separator @R => TokenNode::new(TokenType::Separator, <>),
    @L Integer @R => TokenNode::new(TokenType::Integer, <>),
    @L Float @R => TokenNode::new(TokenType::Float, <>),
    @L "(" @R => TokenNode::new(TokenType::SubStart, <>),
    @L ")" @R => TokenNode::new(TokenType::SubEnd, <>),
    @L "{" @R => TokenNode::new(TokenType::JobStart, <>),
    @L "}" @R => TokenNode::new(TokenType::JobEnd, <>),
    @L "|" @R => TokenNode::new(TokenType::Pipe, <>),
    @L "@@" @R => TokenNode::new(TokenType::Named, <>),
    @L "@" @R => TokenNode::new(TokenType::Unnamed, <>),
}

match {
    r"(and|or)" => LogicalOperator,
    r"(typeof|neg|not)" => UnaryOperator,
} else {
    r"=" => Equals,
    r":=" => Declare,
    ":" => Colon,
    r"( |\t|\\\n)+" => {},
    r"#[^\n]*" => {},
    r"(>=|<=|>|<|==|!=|=~|!~)" => ComparisonOperator,
    r"(\*|//)" => FactorOperator,
    r"(\+|-)" => TermOperator,
    r#""([^\\"]|\\.)*""# => QuotedString,
    r"([\._a-zA-Z%\?~][\._0-9a-zA-Z%\?]*(/[\._0-9a-zA-Z%\?]+)*/?|/[\._0-9a-zA-Z%\?]+(/[\._0-9a-zA-Z%\?]+)*/?|/)" => Label,
    r"--[_0-9a-zA-Z]+" => Flag,
    r"\^[\._a-zA-Z][\._a-zA-Z0-9]*" => Field,
    r#"'([^\\']|\\.)*'"# => QuotedLabel,
    r#"re"([^"]|\\.)*""# => Regex,
    r"(;|\n)( |\t|;|\n|#[^\n]*)*" => Separator,
    r"[0-9][0-9_]*" => Integer,
    r"[0-9][0-9_]*\.[0-9_]+" => Float,
    _
}
